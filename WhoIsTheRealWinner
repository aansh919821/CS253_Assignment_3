{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5LPvN5JFx0ge"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from sklearn.preprocessing import LabelEncoder"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"train.csv\")"
      ],
      "metadata": {
        "id": "O4p0NWrYyeXO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(10)"
      ],
      "metadata": {
        "id": "HT_FCFl7yuQl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail(10)"
      ],
      "metadata": {
        "id": "pHNamqdqB5jj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.get_dummies(df, columns=['Party'])\n",
        "one_hot_columns = [col for col in df.columns if col.startswith('Party_')]\n",
        "df[one_hot_columns] = df[one_hot_columns].astype(int)\n",
        "df.drop(df.columns[2], axis=1, inplace=True)\n",
        "\n",
        "\n",
        "# Display the DataFrame after one-hot encoding\n",
        "df.head(10)\n"
      ],
      "metadata": {
        "id": "xewVOLmb3o7B"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def convert_to_numeric(str):\n",
        "    # Convert string representation to numeric value\n",
        "    if 'crore+' in str.lower():\n",
        "        value = float(str.lower().replace(' crore+', '')) * 10**7\n",
        "    elif 'lac+' in str.lower():\n",
        "        value = float(str.lower().replace(' lac+', '')) * 10**5\n",
        "    elif 'thou+' in str.lower():\n",
        "        value = float(str.lower().replace(' thou+', '')) * 10**3\n",
        "    elif 'hund+' in str.lower():\n",
        "        value = float(str.lower().replace(' hund+', '')) * 10**2\n",
        "    else:\n",
        "        value = float(str)\n",
        "    return int(value)  # Convert to integer\n",
        "\n",
        "# Apply the function to 'Total Assets' and 'Liabilities' columns\n",
        "df['Total Assets'] = df['Total Assets'].apply(convert_to_numeric)\n",
        "df['Liabilities'] = df['Liabilities'].apply(convert_to_numeric)"
      ],
      "metadata": {
        "id": "KN4QlhxGPqky"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.get_dummies(df, columns=['state'])\n",
        "one_hot_columns = [col for col in df.columns if col.startswith('state_')]\n",
        "df[one_hot_columns] = df[one_hot_columns].astype(int)\n"
      ],
      "metadata": {
        "id": "R2TN_JinAEwa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "diff_level_of_educations = df['Education'].unique()\n",
        "print(diff_level_of_educations)"
      ],
      "metadata": {
        "id": "MwEIQp9rAkLH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "education_mapping = {\n",
        "    'Others': 0,\n",
        "    '5th Pass': 2,\n",
        "    'Literate': 1,\n",
        "    'Doctorate': 9,\n",
        "    '10th Pass': 4,\n",
        "    'Graduate': 6,\n",
        "    'Graduate Professional': 7,\n",
        "    'Post Graduate': 8,\n",
        "    '12th Pass': 5,\n",
        "    '8th Pass': 3\n",
        "}\n",
        "\n",
        "# Label encode the 'Education' column\n",
        "df['Education'] = df['Education'].map(education_mapping)\n"
      ],
      "metadata": {
        "id": "phqca0ypAztD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(10)"
      ],
      "metadata": {
        "id": "ZlMcNGNQF_sb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop the 'ID' and 'Candidate' columns\n",
        "df.drop(['ID', 'Candidate'], axis=1, inplace=True)\n",
        "\n"
      ],
      "metadata": {
        "id": "BmvqMt-kGDFd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.naive_bayes import BernoulliNB\n",
        "\n",
        "#from sklearn.impute import SimpleImpute"
      ],
      "metadata": {
        "id": "vW-hvt7jHGoz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(10)"
      ],
      "metadata": {
        "id": "s_2M5glpIp-f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop('Education', axis=1)\n",
        "y = df['Education']\n",
        "\n",
        "# Split the data into training and testing sets (80% train, 20% test)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "model = BernoulliNB()\n",
        "\n",
        "# Train the SVC model\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Predict the labels for the test set\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "\n",
        "# Calculate the accuracy of the model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(\"Accuracy:\", accuracy)"
      ],
      "metadata": {
        "id": "tMrT4Cg6HzjZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(y_pred)"
      ],
      "metadata": {
        "id": "ml55AmRgOIIp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('test.csv')\n"
      ],
      "metadata": {
        "id": "Oizb_3KBJ8io"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.get_dummies(df, columns=['Party'])\n",
        "one_hot_columns = [col for col in df.columns if col.startswith('Party_')]\n",
        "df[one_hot_columns] = df[one_hot_columns].astype(int)\n",
        "\n",
        "\n",
        "df.drop(df.columns[2], axis=1, inplace=True)\n",
        "\n",
        "# Convert string representation to numeric value\n",
        "def convert_to_numeric(s):\n",
        "    if 'crore+' in s.lower():\n",
        "        value = float(s.lower().replace(' crore+', '')) * 10**7\n",
        "    elif 'lac+' in s.lower():\n",
        "        value = float(s.lower().replace(' lac+', '')) * 10**5\n",
        "    elif 'thou+' in s.lower():\n",
        "        value = float(s.lower().replace(' thou+', '')) * 10**3\n",
        "    elif 'hund+' in s.lower():\n",
        "        value = float(s.lower().replace(' hund+', '')) * 10**2\n",
        "    else:\n",
        "        value = float(s)  # If no suffix, assume it's already a numeric value\n",
        "    return int(value)  # Convert to integer\n",
        "\n",
        "# Apply the function to 'Total Assets' and 'Liabilities' columns\n",
        "df['Total Assets'] = df['Total Assets'].apply(convert_to_numeric)\n",
        "df['Liabilities'] = df['Liabilities'].apply(convert_to_numeric)\n",
        "\n",
        "df = pd.get_dummies(df, columns=['state'])\n",
        "one_hot_columns = [col for col in df.columns if col.startswith('state_')]\n",
        "df[one_hot_columns] = df[one_hot_columns].astype(int)"
      ],
      "metadata": {
        "id": "bn1OgaoyJ8mF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_test = df.drop(['ID', 'Candidate'], axis=1)  # Assuming 'ID' and 'Candidate' columns are dropped\n",
        "expected_education = model.predict(X_test)"
      ],
      "metadata": {
        "id": "3IiJ-BthJ8o8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "education_mapping = {\n",
        "    0: 'Others',\n",
        "    1: 'Literate',\n",
        "    2: '5th Pass',\n",
        "    3: '8th Pass',\n",
        "    4: '10th Pass',\n",
        "    5: '12th Pass',\n",
        "    6: 'Graduate',\n",
        "    7: 'Graduate Professional',\n",
        "    8: 'Post Graduate',\n",
        "    9: 'Doctorate'\n",
        "}\n",
        "\n",
        "# Map the expected education labels to their corresponding labels in the dictionary\n",
        "expected_education_labels = [education_mapping[label] for label in expected_education]\n",
        "\n",
        "# Create a DataFrame containing the ID and expected education columns\n",
        "submission = pd.DataFrame({'ID': df['ID'], 'Education': expected_education_labels})\n",
        "\n",
        "# Save the submission DataFrame to a CSV file\n",
        "submission.to_csv('submission.csv', index=False)"
      ],
      "metadata": {
        "id": "h5p8NU_rJ8ri"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
